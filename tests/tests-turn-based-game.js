// Generated by CoffeeScript 1.3.3
(function() {
  var Hiraya, expect;

  if (typeof require === 'function') {
    Hiraya = require('../src/');
    expect = require('expect.js');
  } else {
    Hiraya = this.Hiraya;
    expect = this.expect;
  }

  describe('Turn-based game test suite', function() {
    describe('A Game', function() {
      var Game;
      Game = Hiraya.Game.create();
      it('should create a Game namespace', function() {
        return expect(Game).to.be.ok();
      });
      return it('should have a default Level class', function() {
        return expect(Game.Level).to.be.ok();
      });
    });
    describe('Game: Adding entities', function() {
      it('should be able to add entities based on attributes', function() {
        var Game;
        Game = Hiraya.Game.create();
        Game.Level = Hiraya.LevelTurnBased.extend({
          ready: function() {
            this.addEntity({
              name: 'Marine',
              stats: {
                health: [400, 1000]
              }
            });
            expect(this.entities.at(0).stats.health.value).to.be(400);
            return expect(this.entities.at(0).stats.health.max).to.be(1000);
          }
        });
        return Game.start();
      });
      return it('should be able to automatically place entities in a tile by attributes', function() {
        var Game;
        Game = Hiraya.Game.create();
        Game.Level = Hiraya.LevelTurnBased.extend({
          Tiles: Hiraya.Tiles.extend({
            rows: 10,
            columns: 10
          }),
          ready: function() {
            this.addEntity({
              name: 'Marine',
              tile: {
                x: 9,
                y: 9
              }
            });
            return expect(this.tiles.get(9, 9).isOccupied()).to.be.ok();
          }
        });
        return Game.start();
      });
    });
    describe('Moving entities', function() {
      return it('should be able to move entities to a different tile', function() {
        var Game;
        Game = Hiraya.Game.create();
        Game.Level = Hiraya.LevelTurnBased.extend({
          Tiles: Hiraya.Tiles.extend({
            Tile: Hiraya.Tile.extend({
              vacate: function() {
                console.log('leaving...');
                return this.parent();
              }
            }),
            rows: 10,
            columns: 10
          }),
          ready: function() {
            this.addEntity({
              name: 'Marine',
              tile: {
                x: 9,
                y: 9
              }
            });
            expect(this.tiles.get(9, 9).isOccupied()).to.be.ok();
            this.tiles.get(0, 0).occupy(this.entities.at(0));
            return expect(this.entities.at(0).get('tile')).to.be(this.tiles.get(0, 0));
          }
        });
        return Game.start();
      });
    });
    return describe('Attacking entities', function() {
      return it('should be able to target other entities', function() {
        var Game;
        Game = Hiraya.Game.create();
        Game.Level = Hiraya.LevelTurnBased.extend({
          ready: function() {
            var enemy, hero;
            this.addEntity({
              stats: {
                health: [1],
                attack: [1]
              },
              tile: {
                x: 0,
                y: 1
              }
            });
            this.addEntity({
              stats: {
                health: [1],
                attack: [1]
              },
              tile: {
                x: 0,
                y: 0
              }
            });
            hero = this.entities.at(0);
            enemy = this.entities.at(1);
            hero.attack(enemy);
            return expect(enemy.stats.health.isEmpty()).to.be(true);
          }
        });
        return Game.start();
      });
    });
  });

}).call(this);
